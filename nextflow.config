params {
    outdir = 'results'
    publish_dir_mode = 'copy'
    ref = 'data/ref/sequence.fasta'
    st39_ref = 'data/ref/BKREGE_chromosome.fasta'
    sample_sheet = 'docs/sample_sheet.csv'
    assembly_sample_sheet = 'docs/hybrid_assemblies_sample_sheet.csv'
    local = true
    genus = "Klebsiella" 
    species  = "pneumoniae"
    //gram_stain = "-"
    bakta_database = "results/bakta/bakta_db/db"
    dates = "docs/isolation_dates.csv"
}

process {
    withName: 'before_trim' {
        publishDir = [
            path: "${params.outdir}/Qc/before_trim",
            mode: "copy"
        ]
    }

    withName: 'QUAST' {
        publishDir = [
            path: "${params.outdir}/Qc",
            mode: "copy"
        ]
    }

    withName: 'FILTLONG' {
        publishDir = [
            path: "${params.outdir}/filtlong",
            mode: "copy"
        ]
    }


    withName: 'NANOPLOT' {
        publishDir = [
            path: "${params.outdir}/nanoplot",
            mode: "copy"
        ]
    }

    withName: 'FLYE' {
        publishDir = [
            path: "${params.outdir}/flye",
            mode: "copy"
        ]
    }

    withName: 'RAVEN' {
        publishDir = [
            path: "${params.outdir}/raven",
            mode: "copy"
        ]
    }
    withName: 'MINIPOLISH' {
        publishDir = [
            path: "${params.outdir}/minipolish",
            mode: "copy"
        ]
    }

    withName: 'TRYCYCLER_CLUSTER' {
        publishDir = [
            path: "${params.outdir}/trycycler_clusters",
            mode: "copy"
        ]
    }
    withName: 'MEDAKA_POLISH' {
        publishDir = [
            path: "${params.outdir}/medaka",
            mode: "copy"
        ]
    }
    withName: 'POLYPOLISH' {
        publishDir = [
            path: "${params.outdir}/polypolish",
            mode: "copy"
        ]
    }

     withName: 'POLCA' {
        publishDir = [
            path: "${params.outdir}/polished_assemblies",
            mode: "copy"
        ]
    }

     withName: 'SHOVILL' {
        cpus = 10
        publishDir = [
            path: "${params.outdir}/shovill",
            mode: "copy"
        ]
    }

    withName: 'ARIBA_RUN' {
    publishDir = [
        path: "${params.outdir}/ariba",
        mode: "copy"
        ]
    }

    withName: 'ABRICATE' {
    publishDir = [
        path: "${params.outdir}/abricate",
        mode: "copy"
        ]
    }

    withName: 'PROKKA' {
    publishDir = [
        path: "${params.outdir}/prokka",
        mode: "copy"
        ]
    }

    withName: 'BAKTA' {
    publishDir = [
        path: "${params.outdir}/bakta",
        mode: "copy"
        ]
    }

    withName: 'MLST' {
    publishDir = [
        path: "${params.outdir}/mlst",
        mode: "copy"
        ]
    }

    withName: 'PANAROO' {
    publishDir = [
        path: "${params.outdir}",
        mode: "copy"
        ]
    }

    withName: 'CORE_GENE_TREE' {
    publishDir = [
        path: "${params.outdir}/core_gene_tree",
        mode: "copy"
        ]
    }

    withName: 'SNP_SITES' {
    publishDir = [
        path: "${params.outdir}/snp_sites",
        mode: "copy"
        ]
    }



    withName: 'SNIPPY' {
    publishDir = [
        path: "${params.outdir}/variants",
        mode: "copy"
        ]
    }

    withName: 'SNIPPY_CORE' {
    publishDir = [
        path: "${params.outdir}/snippy",
        mode: "copy"
        ]
    }

    withName: 'IQTREE' {
    publishDir = [
        path: "${params.outdir}/iqtree",
        mode: "copy"
        ]
    }

    withName: 'KLEBORATE' {
    publishDir = [
        path: "${params.outdir}/kleborate",
        mode: "copy"
        ]
    }

    withName: 'GUBBINS' {
    publishDir = [
        path: "${params.outdir}/gubbins",
        mode: "copy"
        ]
    }

    withName: 'RENAME_SHOVIL_ASSEMBLY' {
    publishDir = [
        path: "${params.outdir}/assemblies",
        mode: "copy"
        ]
    }

}


docker.enabled = true
docker.runOptions = '-u $(id -u):$(id -g)'
conda.enabled = true

/*
========================================================================================
    Nextflow Metrics & Reports
========================================================================================
*/
timeline.overwrite = true
timeline {
  enabled = true
  file    = "${params.outdir}/timeline.html"
}

report.overwrite = true
report {
  enabled = true
  file    = "${params.outdir}/report.html"
}

/*
trace.overwrite = true
trace {
  enabled = false
  fields  = 'task_id,name,status,exit,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar'
  file    = "${params.outdir}/trace.txt"
}

*/
